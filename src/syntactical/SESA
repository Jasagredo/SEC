package syntactical;

import lexical.SELA;
import lexical.SELAErr;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import ast.Dec.*;
import ast.Expr.*;
import ast.Inst.*;
import java.util.List;
import java.util.ArrayList;

scan with {: 
	return getScanner().next_token(); 
:};
parser code {: 
   private SELAErr errores;
   public void syntax_error(ComplexSymbol unidadLexica) {
     errores.errorSintactico(unidadLexica);
   }
:};

init with {: 
   errores = new SELAErr();
   SELA alex = (SELA)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     CONS,  
			 BLOQUE, FBLOQUE, SEP,
			 PAP, PCI, ASIG, FININSTR,
			 IF, APCON, CICON, ENTONCES, SINO,
			 MIENTRAS, SBUCLE,
			 FSI, FMIENTRAS,
			 APACCESO, CIACCESO, PYC;
terminal Tipo LOG, ENT;
terminal Operadores MAS, MENOS, POR, DIV, IGUAL, MAYOR, MENOR, CON, DIS, NEG;
terminal String ACCESO, IDV, DIM;
terminal String NUMENT;
terminal boolean TRUE, FALSE;

non terminal Block Programa;
non terminal List<Dec> ListaDec;
non terminal List<Inst> ListaInstr;
non terminal Dec Dec;
non terminal Tipo Tipo;
non terminal TipoC TipoC;
non terminal Expr Base;
non terminal NumConst BaseE;
non terminal BoolConst BaseL;
non terminal DArray DecArray;
non terminal DArray NumPYC;
non terminal Inst Instr;
non terminal Expr Var;
non terminal Operadores OPC1;
non terminal Operadores OPC2;
non terminal Operadores OPC3;
non terminal Expr Exp;
non terminal Expr Exp1;
non terminal Expr Exp2;
non terminal Expr Exp3;
			  

precedence left POR, DIV;
precedence left CON;
precedence left DIS;
precedence left MAS, MENOS;
precedence left MENOR, MAYOR;
precedence left IGUAL;
precedence left SINO;

start with Programa;

Programa  ::=  BLOQUE ListaDec:ld SEP ListaInstr:li FBLOQUE 	{: RESULT = new Block(ld, li); :}
    ;
ListaDec  ::=  Dec:d ListaDec:ld 								{: ld.add(0, d); RESULT = ld; :}
	| CONS Dec:d ListaDec:ld									{: d.cons = true; ld.add(0, d); RESULT = ld; :}
    |															{: RESULT = new ArrayList<Dec>(); :}
    | error
    ;
ListaInstr  ::= ListaInstr:li Instr:i							{: li.add(i); RESULT = li; :}
    | 															{: RESULT = new ArrayList<Inst>(); :}
    | error
    ;
Dec ::= Tipo:t IDV:i FININSTR 									{: RESULT = new Dec(t, new Id(i), null); :}
	| Tipo:t IDV:i ASIG Base:b FININSTR							{: RESULT = new Dec(t, new Id(i), b); :}
	| TipoC:t IDV:i FININSTR									{: RESULT = new Dec(t, new Id(i), null); :}
	| TipoC:t IDV:i ASIG DecArray:da FININSTR					{: RESULT = new Dec(t, new Id(i), da); :}
    | error:e													{: GestionaErrores.gestiona("declaracion de instrucci√≥n incorrecta", exleft.getLine(), exleft.getColumn()); :}
    ;
Tipo ::= ENT													{: RESULT = Tipo.ENT; :}
	| LOG														{: RESULT = Tipo.LOG; :}
	;
TipoC ::= TipoC:t DIM:dim										{: t.d.add(Integer.parseInt(dim.substring(1, dim.length()-1))); RESULT = t; :}
	| Tipo:t DIM:d 												{: RESULT = new TipoC(t, d); :}
	;
Base ::= BaseE:b												{: RESULT = b; :}
	| BaseL:l													{: RESULT = l; :}
	| IDV:i														{: RESULT = new Id(i); :}
	;
BaseE ::= NUMENT:n												{: RESULT = new NumConst(n); :}
	;
BaseL ::= TRUE													{: RESULT = new BoolConst(true); :}
	| FALSE														{: RESULT = new BoolConst(false); :}
	;
DecArray ::= APACCESO NumPYC:n CIACCESO							{: RESULT = n; :}
	;
NumPYC ::= NumPYC:n PYC Base:b									{: n.lexp.add((Base)b); RESULT = n; :}									
	| Base:b													{: DArray n = new DArray(); n.lexp.add((Base)b); RESULT = n; :}
	| NumPYC:n PYC DecArray:dc									{: n.lexp.add((DArray)dc); RESULT = n; :}
	| DecArray:dc												{: DArray n = new DArray(); n.lexp.add((DArray)dc); RESULT = n; :}
	;
Instr ::= FININSTR												{: RESULT = new Vacia(); :}
    | Programa:p												{: RESULT = p; :}
    | Exp1:s ASIG Exp1:e FININSTR									{: RESULT = new Asig(s,e); :}
    | IF APCON Exp1:e CICON ENTONCES ListaInstr:l FSI			{: RESULT = new IfThen(e, l); :}
    | IF APCON Exp1:e CICON ENTONCES ListaInstr:l SINO ListaInstr:m FSI{: RESULT = new IfThenElse(e, l, m); :}
    | MIENTRAS APCON Exp1:e CICON SBUCLE ListaInstr:l FMIENTRAS		{: RESULT = new While(e, l); :}
    ;
Var ::= Var:i ACCESO:a											{: RESULT = new Acceso(i, a); :}
	| IDV:i														{: RESULT = new Id(i); :} 
	;
Exp ::= BaseE:b													{: RESULT = b; :}
	| BaseL:l													{: RESULT = l; :}
	| Var:v														{: RESULT = v; :}
    | PAP Exp1:e PCI											{: RESULT = e; :}
    ;
Exp1 ::= Exp2:e1 OPC1:o Exp2:e2									{: RESULT = new Expr(o, e1, e2); :}
	| Exp2:e													{: RESULT = e; :}
	| Exp1:e1 OPC1:o Exp2:e2									{: RESULT = new Expr(o, e1, e2); :}
	;
Exp2 ::= Exp3:e1 OPC2:o Exp3:e2									{: RESULT = new Expr(o, e1, e2); :}
	| Exp3:e													{: RESULT = e; :}
	| Exp2:e1 OPC2:o Exp3:e2										{: RESULT = new Expr(o, e1, e2); :}
	;
Exp3 ::= Exp:e1 OPC3:o Exp:e2									{: RESULT = new Expr(o, e1, e2); :}
	| Exp:e														{: RESULT = e; :}
	| Exp3:e1 OPC3:o Exp:e2										{: RESULT = new Expr(o, e1, e2); :}	
	| NEG Exp:e												{: RESULT = new Expr(Operadores.NEG, null, e); :}
	;
OPC1 ::= MAYOR													{: RESULT = Operadores.MAYOR; :}
	| MENOR														{: RESULT = Operadores.MENOR; :}
	| IGUAL														{: RESULT = Operadores.IGUAL; :}
	;
OPC2 ::= DIS													{: RESULT = Operadores.DIS; :}
	| MAS														{: RESULT = Operadores.MAS; :}
	| MENOS														{: RESULT = Operadores.MENOS; :}
	;
OPC3 ::= CON													{: RESULT = Operadores.CON; :}
	| POR														{: RESULT = Operadores.POR; :}
	| DIV														{: RESULT = Operadores.DIV; :}
	;