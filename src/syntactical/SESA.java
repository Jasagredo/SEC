
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue May 16 01:37:47 CEST 2017
//----------------------------------------------------

package syntactical;

import lexical.SELA;
import lexical.SELAErr;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue May 16 01:37:47 CEST 2017
  */
public class SESA extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SESA() {super();}

  /** Constructor which sets the default scanner. */
  public SESA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SESA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\005\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\005\002\000" +
    "\002\006\005\000\002\006\007\000\002\006\005\000\002" +
    "\006\007\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\010\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\005\000\002\015\005\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\006\000\002\016\010\000\002\016\012\000\002\016\010" +
    "\000\002\024\004\000\002\024\004\000\002\017\003\000" +
    "\002\017\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\004\000\002\022\005\000\002\022\005\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\024\005\001\002\000\004\002\135\001" +
    "\002\000\012\005\013\020\007\021\010\027\ufffd\001\002" +
    "\000\006\026\125\047\124\001\002\000\006\026\ufff3\047" +
    "\ufff3\001\002\000\006\026\ufff4\047\ufff4\001\002\000\004" +
    "\027\035\001\002\000\006\026\021\047\020\001\002\000" +
    "\006\020\007\021\010\001\002\000\012\005\013\020\007" +
    "\021\010\027\ufffd\001\002\000\004\027\uffff\001\002\000" +
    "\012\005\013\020\007\021\010\027\ufffd\001\002\000\004" +
    "\027\ufffe\001\002\000\006\026\ufff1\047\ufff1\001\002\000" +
    "\006\032\023\033\022\001\002\000\012\005\ufff6\020\ufff6" +
    "\021\ufff6\027\ufff6\001\002\000\004\045\025\001\002\000" +
    "\004\033\034\001\002\000\004\004\030\001\002\000\006" +
    "\046\031\050\032\001\002\000\006\046\uffe8\050\uffe8\001" +
    "\002\000\036\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\031\uffed\033\uffed\036" +
    "\uffed\046\uffed\050\uffed\001\002\000\004\033\uffea\001\002" +
    "\000\004\004\030\001\002\000\006\046\uffe9\050\uffe9\001" +
    "\002\000\012\005\ufff5\020\ufff5\021\ufff5\027\ufff5\001\002" +
    "\000\020\024\ufffb\025\ufffb\026\ufffb\033\ufffb\034\ufffb\041" +
    "\ufffb\044\ufffb\001\002\000\020\024\005\025\046\026\040" +
    "\033\042\034\041\041\044\044\037\001\002\000\034\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\031\uffde\032\uffde\033\uffde\036\uffde\001" +
    "\002\000\034\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\036\uffdf\001\002\000\004\035\115\001\002\000\024" +
    "\024\uffe7\025\uffe7\026\uffe7\033\uffe7\034\uffe7\040\uffe7\041" +
    "\uffe7\043\uffe7\044\uffe7\001\002\000\020\024\ufffc\025\ufffc" +
    "\026\ufffc\033\ufffc\034\ufffc\041\ufffc\044\ufffc\001\002\000" +
    "\004\035\104\001\002\000\024\024\uffe6\025\uffe6\026\uffe6" +
    "\033\uffe6\034\uffe6\040\uffe6\041\uffe6\043\uffe6\044\uffe6\001" +
    "\002\000\026\002\000\024\000\025\000\026\000\033\000" +
    "\034\000\040\000\041\000\043\000\044\000\001\002\000" +
    "\004\032\050\001\002\000\020\004\030\017\057\022\052" +
    "\023\055\026\040\030\051\044\037\001\002\000\020\004" +
    "\030\017\057\022\052\023\055\026\040\030\051\044\037" +
    "\001\002\000\032\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\031\uffec\033\uffec" +
    "\036\uffec\001\002\000\026\006\070\007\063\010\066\011" +
    "\071\012\073\013\072\014\064\015\074\016\075\033\101" +
    "\001\002\000\032\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\031\uffdc\033\uffdc" +
    "\036\uffdc\001\002\000\032\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\031\uffeb" +
    "\033\uffeb\036\uffeb\001\002\000\032\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\031\uffdd\033\uffdd\036\uffdd\001\002\000\020\004\030\017" +
    "\057\022\052\023\055\026\040\030\051\044\037\001\002" +
    "\000\032\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\031\uffdb\033\uffdb\036\uffdb" +
    "\001\002\000\032\006\070\007\063\010\066\011\071\012" +
    "\073\013\072\014\064\015\074\016\075\031\uffd8\033\uffd8" +
    "\036\uffd8\001\002\000\020\004\030\017\057\022\052\023" +
    "\055\026\040\030\051\044\037\001\002\000\020\004\uffcf" +
    "\017\uffcf\022\uffcf\023\uffcf\026\uffcf\030\uffcf\044\uffcf\001" +
    "\002\000\020\004\uffd4\017\uffd4\022\uffd4\023\uffd4\026\uffd4" +
    "\030\uffd4\044\uffd4\001\002\000\020\004\030\017\057\022" +
    "\052\023\055\026\040\030\051\044\037\001\002\000\020" +
    "\004\uffce\017\uffce\022\uffce\023\uffce\026\uffce\030\uffce\044" +
    "\uffce\001\002\000\020\004\030\017\057\022\052\023\055" +
    "\026\040\030\051\044\037\001\002\000\020\004\uffd0\017" +
    "\uffd0\022\uffd0\023\uffd0\026\uffd0\030\uffd0\044\uffd0\001\002" +
    "\000\020\004\uffcd\017\uffcd\022\uffcd\023\uffcd\026\uffcd\030" +
    "\uffcd\044\uffcd\001\002\000\020\004\uffd5\017\uffd5\022\uffd5" +
    "\023\uffd5\026\uffd5\030\uffd5\044\uffd5\001\002\000\020\004" +
    "\uffd3\017\uffd3\022\uffd3\023\uffd3\026\uffd3\030\uffd3\044\uffd3" +
    "\001\002\000\020\004\uffd2\017\uffd2\022\uffd2\023\uffd2\026" +
    "\uffd2\030\uffd2\044\uffd2\001\002\000\020\004\uffd1\017\uffd1" +
    "\022\uffd1\023\uffd1\026\uffd1\030\uffd1\044\uffd1\001\002\000" +
    "\032\006\070\007\063\010\066\011\071\012\073\013\072" +
    "\014\064\015\074\016\075\031\uffd9\033\uffd9\036\uffd9\001" +
    "\002\000\032\006\070\007\063\010\066\011\071\012\073" +
    "\013\072\014\064\015\074\016\075\031\uffd6\033\uffd6\036" +
    "\uffd6\001\002\000\032\006\070\007\063\010\066\011\071" +
    "\012\073\013\072\014\064\015\074\016\075\031\uffd7\033" +
    "\uffd7\036\uffd7\001\002\000\024\024\uffe5\025\uffe5\026\uffe5" +
    "\033\uffe5\034\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\001" +
    "\002\000\026\006\070\007\063\010\066\011\071\012\073" +
    "\013\072\014\064\015\074\016\075\031\103\001\002\000" +
    "\032\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\031\uffda\033\uffda\036\uffda\001" +
    "\002\000\020\004\030\017\057\022\052\023\055\026\040" +
    "\030\051\044\037\001\002\000\026\006\070\007\063\010" +
    "\066\011\071\012\073\013\072\014\064\015\074\016\075" +
    "\036\106\001\002\000\004\042\107\001\002\000\024\024" +
    "\ufff9\025\ufff9\026\ufff9\033\ufff9\034\ufff9\040\ufff9\041\ufff9" +
    "\043\ufff9\044\ufff9\001\002\000\024\024\uffe2\025\uffe2\026" +
    "\uffe2\033\uffe2\034\uffe2\040\uffe2\041\uffe2\043\112\044\uffe2" +
    "\001\002\000\024\024\ufffa\025\ufffa\026\ufffa\033\ufffa\034" +
    "\ufffa\040\ufffa\041\ufffa\043\ufffa\044\ufffa\001\002\000\020" +
    "\024\005\026\040\033\042\034\041\041\044\043\112\044" +
    "\037\001\002\000\024\024\uffe1\025\uffe1\026\uffe1\033\uffe1" +
    "\034\uffe1\040\uffe1\041\uffe1\043\uffe1\044\uffe1\001\002\000" +
    "\024\024\uffe0\025\uffe0\026\uffe0\033\uffe0\034\uffe0\040\uffe0" +
    "\041\uffe0\043\uffe0\044\uffe0\001\002\000\020\004\030\017" +
    "\057\022\052\023\055\026\040\030\051\044\037\001\002" +
    "\000\026\006\070\007\063\010\066\011\071\012\073\013" +
    "\072\014\064\015\074\016\075\036\117\001\002\000\004" +
    "\037\120\001\002\000\024\024\ufff9\025\ufff9\026\ufff9\033" +
    "\ufff9\034\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\001\002" +
    "\000\024\024\uffe4\025\uffe4\026\uffe4\033\uffe4\034\uffe4\040" +
    "\122\041\uffe4\043\112\044\uffe4\001\002\000\024\024\ufff9" +
    "\025\ufff9\026\ufff9\033\ufff9\034\ufff9\040\ufff9\041\ufff9\043" +
    "\ufff9\044\ufff9\001\002\000\024\024\uffe3\025\uffe3\026\uffe3" +
    "\033\uffe3\034\uffe3\040\uffe3\041\uffe3\043\112\044\uffe3\001" +
    "\002\000\006\026\ufff2\047\ufff2\001\002\000\006\032\127" +
    "\033\126\001\002\000\012\005\ufff8\020\ufff8\021\ufff8\027" +
    "\ufff8\001\002\000\012\004\030\022\052\023\055\026\133" +
    "\001\002\000\004\033\uffef\001\002\000\004\033\134\001" +
    "\002\000\004\033\ufff0\001\002\000\004\033\uffee\001\002" +
    "\000\012\005\ufff7\020\ufff7\021\ufff7\027\ufff7\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\010\006\013\007\005\010\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\015\007\005\010\011" +
    "\001\001\000\012\003\014\006\013\007\005\010\011\001" +
    "\001\000\002\001\001\000\012\003\016\006\013\007\005" +
    "\010\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\023\001\001" +
    "\000\002\001\001\000\006\012\026\015\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\035\001\001\000\010\002\044" +
    "\016\042\017\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\055\013\053\017\057\022\052" +
    "\001\001\000\012\012\055\013\053\017\057\022\101\001" +
    "\001\000\002\001\001\000\010\020\066\021\061\023\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\055\013\053\017\057\022\060\001\001" +
    "\000\002\001\001\000\010\020\066\021\061\023\064\001" +
    "\001\000\012\012\055\013\053\017\057\022\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\055\013" +
    "\053\017\057\022\076\001\001\000\002\001\001\000\012" +
    "\012\055\013\053\017\057\022\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\066\021" +
    "\061\023\064\001\001\000\010\020\066\021\061\023\064" +
    "\001\001\000\010\020\066\021\061\023\064\001\001\000" +
    "\002\001\001\000\010\020\066\021\061\023\064\001\001" +
    "\000\002\001\001\000\012\012\055\013\053\017\057\022" +
    "\104\001\001\000\010\020\066\021\061\023\064\001\001" +
    "\000\002\001\001\000\004\005\107\001\001\000\004\024" +
    "\110\001\001\000\002\001\001\000\012\002\044\016\112" +
    "\017\046\024\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\055\013\053\017\057\022\115\001\001" +
    "\000\010\020\066\021\061\023\064\001\001\000\002\001" +
    "\001\000\004\005\120\001\001\000\004\024\110\001\001" +
    "\000\004\005\122\001\001\000\004\024\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\130\012\131\013\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new SELAErr();
   SELA alex = (SELA)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	return getScanner().next_token(); 

    }

 
   private SELAErr errores;
   public void syntax_error(ComplexSymbol unidadLexica) {
     errores.errorSintactico(unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final SESA parser;

  /** Constructor */
  CUP$parser$actions(SESA parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= BLOQUE ListaDec SEP ListaInstr FBLOQUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListaDec ::= Dec ListaDec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListaDec ::= CONS Dec ListaDec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListaDec ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListaInstr ::= ListaInstr Instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListaInstr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListaInstrCond ::= ListaInstrCond InstrCond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstrCond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListaInstrCond ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstrCond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Dec ::= Tipo IDV FININSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Dec ::= Tipo IDV ASIG Base FININSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Dec ::= TipoC IDV FININSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Dec ::= TipoC IDV ASIG DecArray FININSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= ENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= LOG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TipoC ::= Tipo DIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TipoC ::= TipoC DIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Base ::= BaseE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Base ::= BaseL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Base ::= IDV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BaseE ::= NUMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BaseL ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BaseL ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecArray ::= APACCESO NumPYC CIACCESO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecArray",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NumPYC ::= NumPYC PYC BaseE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumPYC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NumPYC ::= BaseE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumPYC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instr ::= FININSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instr ::= Programa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instr ::= Var ASIG Exp FININSTR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instr ::= IF APCON Exp CICON ENTONCES ListaInstrCond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instr ::= IF APCON Exp CICON ENTONCES ListaInstrCond SINO ListaInstrCond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instr ::= MIENTRAS APCON Exp CICON SBUCLE ListaInstrCond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InstrCond ::= GCONTROL Instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstrCond",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InstrCond ::= GCONTROL InstrCond 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstrCond",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Var ::= IDV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Var ::= ACCESO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= BaseE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= BaseL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= PAP Exp PCI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= Exp OPC Exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= NEG Exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp OPL Exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= Exp OPE Exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPC ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPC ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPC ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPL ::= CON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPL ::= DIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPL",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPE ::= MAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPE ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPE ::= POR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPE ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

