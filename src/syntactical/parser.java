
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Aug 24 13:31:53 CEST 2017
//----------------------------------------------------

package syntactical;

import lexical.SELA;
import lexical.SELAErr;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import ast.Dec.*;
import ast.Expr.*;
import ast.Inst.*;
import java.util.List;
import java.util.ArrayList;
import errors.ErrorSintactico;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Aug 24 13:31:53 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\005\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\005\000\002\005\007\000" +
    "\002\005\005\000\002\005\007\000\002\006\003\000\002" +
    "\006\003\000\002\007\004\000\002\007\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\005\000" +
    "\002\014\005\000\002\014\003\000\002\014\005\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\006\000\002\015\011\000\002\015\013\000\002\015\011" +
    "\000\002\016\004\000\002\016\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\005\000\002" +
    "\023\005\000\002\023\003\000\002\023\005\000\002\024" +
    "\005\000\002\024\003\000\002\024\005\000\002\025\005" +
    "\000\002\025\003\000\002\025\005\000\002\025\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\004\005\005\001\002\000\004\002\147\001" +
    "\002\000\012\004\013\007\ufffd\030\007\031\010\001\002" +
    "\000\006\045\142\046\141\001\002\000\006\045\ufff5\046" +
    "\ufff5\001\002\000\006\045\ufff6\046\ufff6\001\002\000\004" +
    "\007\044\001\002\000\006\045\021\046\020\001\002\000" +
    "\006\030\007\031\010\001\002\000\012\004\013\007\ufffd" +
    "\030\007\031\010\001\002\000\004\007\uffff\001\002\000" +
    "\012\004\013\007\ufffd\030\007\031\010\001\002\000\004" +
    "\007\ufffe\001\002\000\006\045\ufff4\046\ufff4\001\002\000" +
    "\006\012\023\013\022\001\002\000\012\004\ufff8\007\ufff8" +
    "\030\ufff8\031\ufff8\001\002\000\004\025\025\001\002\000" +
    "\004\013\043\001\002\000\014\025\025\045\031\047\034" +
    "\050\026\051\033\001\002\000\040\011\uffee\012\uffee\013" +
    "\uffee\016\uffee\026\uffee\027\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001" +
    "\002\000\006\026\uffe8\027\uffe8\001\002\000\006\026\uffea" +
    "\027\uffea\001\002\000\010\013\ufff0\026\ufff0\027\ufff0\001" +
    "\002\000\010\013\ufff1\026\ufff1\027\ufff1\001\002\000\040" +
    "\011\uffed\012\uffed\013\uffed\016\uffed\026\uffed\027\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\001\002\000\040\011\uffef\012\uffef\013" +
    "\uffef\016\uffef\026\uffef\027\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\001" +
    "\002\000\010\013\ufff2\026\ufff2\027\ufff2\001\002\000\006" +
    "\026\037\027\040\001\002\000\010\013\uffec\026\uffec\027" +
    "\uffec\001\002\000\014\025\025\045\031\047\034\050\026" +
    "\051\033\001\002\000\006\026\uffe9\027\uffe9\001\002\000" +
    "\006\026\uffeb\027\uffeb\001\002\000\012\004\ufff7\007\ufff7" +
    "\030\ufff7\031\ufff7\001\002\000\030\005\ufffb\006\ufffb\010" +
    "\ufffb\013\ufffb\014\ufffb\021\ufffb\043\ufffb\045\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\001\002\000\030\005\005\006\051\010" +
    "\057\013\055\014\052\021\065\043\047\045\062\047\034" +
    "\050\026\051\033\001\002\000\036\005\ufffc\006\ufffc\010" +
    "\ufffc\013\ufffc\014\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc" +
    "\043\ufffc\045\ufffc\047\ufffc\050\ufffc\051\ufffc\001\002\000" +
    "\014\010\057\045\062\047\034\050\026\051\033\001\002" +
    "\000\036\011\uffdd\012\uffdd\013\uffdd\016\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\044\137\001\002\000\040\002\000\005\000\006" +
    "\000\010\000\013\000\014\000\020\000\021\000\023\000" +
    "\024\000\043\000\045\000\047\000\050\000\051\000\001" +
    "\002\000\004\015\126\001\002\000\036\005\uffe6\006\uffe6" +
    "\010\uffe6\013\uffe6\014\uffe6\020\uffe6\021\uffe6\023\uffe6\024" +
    "\uffe6\043\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6\001\002" +
    "\000\034\011\uffde\012\uffde\013\uffde\016\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\001\002\000\036\005\uffe7\006\uffe7\010\uffe7\013" +
    "\uffe7\014\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\043\uffe7" +
    "\045\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002\000\034\011" +
    "\uffd4\012\uffd4\013\uffd4\016\uffd4\032\uffd4\033\uffd4\034\107" +
    "\035\106\036\uffd4\037\uffd4\040\uffd4\041\110\042\uffd4\001" +
    "\002\000\016\010\057\043\047\045\062\047\034\050\026" +
    "\051\033\001\002\000\034\011\uffd7\012\uffd7\013\uffd7\016" +
    "\uffd7\032\101\033\102\034\107\035\106\036\uffd7\037\uffd7" +
    "\040\uffd7\041\110\042\103\001\002\000\034\011\uffdf\012" +
    "\uffdf\013\uffdf\016\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002\000" +
    "\036\011\uffe0\012\uffe0\013\uffe0\016\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\044\uffe0\001\002\000\026\011\uffda\012\uffda\013\uffda" +
    "\016\uffda\032\101\033\102\036\071\037\074\040\073\042" +
    "\103\001\002\000\012\012\113\036\071\037\074\040\073" +
    "\001\002\000\004\015\066\001\002\000\016\010\057\043" +
    "\047\045\062\047\034\050\026\051\033\001\002\000\012" +
    "\016\072\036\071\037\074\040\073\001\002\000\016\010" +
    "\057\043\047\045\062\047\034\050\026\051\033\001\002" +
    "\000\016\010\uffcf\043\uffcf\045\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\004\022\075\001\002\000\016\010\uffd0" +
    "\043\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000" +
    "\016\010\uffd1\043\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\001\002\000\030\005\ufffb\010\ufffb\013\ufffb\014\ufffb\021" +
    "\ufffb\024\ufffb\043\ufffb\045\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\001\002\000\030\005\005\010\057\013\055\014\052\021" +
    "\065\024\077\043\047\045\062\047\034\050\026\051\033" +
    "\001\002\000\036\005\uffe2\006\uffe2\010\uffe2\013\uffe2\014" +
    "\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\043\uffe2\045\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\001\002\000\026\011\uffd9\012" +
    "\uffd9\013\uffd9\016\uffd9\032\101\033\102\036\uffd9\037\uffd9" +
    "\040\uffd9\042\103\001\002\000\016\010\uffcd\043\uffcd\045" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000\016\010\uffcc" +
    "\043\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc\001\002\000" +
    "\016\010\uffce\043\uffce\045\uffce\047\uffce\050\uffce\051\uffce" +
    "\001\002\000\016\010\057\043\047\045\062\047\034\050" +
    "\026\051\033\001\002\000\034\011\uffd6\012\uffd6\013\uffd6" +
    "\016\uffd6\032\uffd6\033\uffd6\034\107\035\106\036\uffd6\037" +
    "\uffd6\040\uffd6\041\110\042\uffd6\001\002\000\014\010\uffc9" +
    "\045\uffc9\047\uffc9\050\uffc9\051\uffc9\001\002\000\014\010" +
    "\uffca\045\uffca\047\uffca\050\uffca\051\uffca\001\002\000\014" +
    "\010\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb\001\002\000" +
    "\014\010\057\045\062\047\034\050\026\051\033\001\002" +
    "\000\034\011\uffd3\012\uffd3\013\uffd3\016\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\001\002\000\016\010\057\043\047\045\062\047" +
    "\034\050\026\051\033\001\002\000\012\013\115\036\071" +
    "\037\074\040\073\001\002\000\036\005\uffe5\006\uffe5\010" +
    "\uffe5\013\uffe5\014\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5" +
    "\043\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5\001\002\000" +
    "\016\010\057\043\047\045\062\047\034\050\026\051\033" +
    "\001\002\000\026\011\uffdb\012\uffdb\013\uffdb\016\uffdb\032" +
    "\101\033\102\036\uffdb\037\uffdb\040\uffdb\042\103\001\002" +
    "\000\016\010\057\043\047\045\062\047\034\050\026\051" +
    "\033\001\002\000\034\011\uffd8\012\uffd8\013\uffd8\016\uffd8" +
    "\032\uffd8\033\uffd8\034\107\035\106\036\uffd8\037\uffd8\040" +
    "\uffd8\041\110\042\uffd8\001\002\000\012\011\123\036\071" +
    "\037\074\040\073\001\002\000\034\011\uffdc\012\uffdc\013" +
    "\uffdc\016\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\uffdc\001\002\000\014\010" +
    "\057\045\062\047\034\050\026\051\033\001\002\000\034" +
    "\011\uffd5\012\uffd5\013\uffd5\016\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\001\002\000\016\010\057\043\047\045\062\047\034\050" +
    "\026\051\033\001\002\000\012\016\130\036\071\037\074" +
    "\040\073\001\002\000\004\017\131\001\002\000\032\005" +
    "\ufffb\010\ufffb\013\ufffb\014\ufffb\020\ufffb\021\ufffb\023\ufffb" +
    "\043\ufffb\045\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002\000" +
    "\032\005\005\010\057\013\055\014\052\020\134\021\065" +
    "\023\133\043\047\045\062\047\034\050\026\051\033\001" +
    "\002\000\036\005\uffe4\006\uffe4\010\uffe4\013\uffe4\014\uffe4" +
    "\020\uffe4\021\uffe4\023\uffe4\024\uffe4\043\uffe4\045\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\001\002\000\030\005\ufffb\010\ufffb" +
    "\013\ufffb\014\ufffb\021\ufffb\023\ufffb\043\ufffb\045\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\001\002\000\030\005\005\010\057" +
    "\013\055\014\052\021\065\023\136\043\047\045\062\047" +
    "\034\050\026\051\033\001\002\000\036\005\uffe3\006\uffe3" +
    "\010\uffe3\013\uffe3\014\uffe3\020\uffe3\021\uffe3\023\uffe3\024" +
    "\uffe3\043\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\001\002" +
    "\000\036\011\uffe1\012\uffe1\013\uffe1\016\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\044\uffe1\001\002\000\034\011\uffd2\012\uffd2\013" +
    "\uffd2\016\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000\006\045" +
    "\ufff3\046\ufff3\001\002\000\006\012\144\013\143\001\002" +
    "\000\012\004\ufffa\007\ufffa\030\ufffa\031\ufffa\001\002\000" +
    "\012\045\031\047\034\050\026\051\033\001\002\000\004" +
    "\013\146\001\002\000\012\004\ufff9\007\ufff9\030\ufff9\031" +
    "\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\010\005\013\006\005\007\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\015\006\005\007\011" +
    "\001\001\000\012\003\014\005\013\006\005\007\011\001" +
    "\001\000\002\001\001\000\012\003\016\005\013\006\005" +
    "\007\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\023\001\001" +
    "\000\002\001\001\000\014\010\027\011\034\012\031\013" +
    "\026\014\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\041\011\034\012" +
    "\031\013\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\044\001\001\000\024\002" +
    "\052\011\060\012\053\015\045\016\047\022\055\023\063" +
    "\024\062\025\057\001\001\000\002\001\001\000\012\011" +
    "\060\012\053\016\047\022\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\123\001\001" +
    "\000\020\011\060\012\053\016\047\022\055\023\121\024" +
    "\062\025\057\001\001\000\006\020\117\021\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\115\020" +
    "\103\001\001\000\004\017\067\001\001\000\002\001\001" +
    "\000\020\011\060\012\053\016\047\022\055\023\066\024" +
    "\062\025\057\001\001\000\004\017\067\001\001\000\016" +
    "\011\060\012\053\016\047\022\055\024\077\025\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\075\001\001\000\024\002" +
    "\052\011\060\012\053\015\045\016\047\022\055\023\063" +
    "\024\062\025\057\001\001\000\002\001\001\000\004\020" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\060\012\053\016\047\022\055\025" +
    "\104\001\001\000\004\021\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\060\012" +
    "\053\016\047\022\111\001\001\000\002\001\001\000\020" +
    "\011\060\012\053\016\047\022\055\023\113\024\062\025" +
    "\057\001\001\000\004\017\067\001\001\000\002\001\001" +
    "\000\016\011\060\012\053\016\047\022\055\024\116\025" +
    "\057\001\001\000\004\020\103\001\001\000\014\011\060" +
    "\012\053\016\047\022\055\025\120\001\001\000\004\021" +
    "\110\001\001\000\004\017\067\001\001\000\002\001\001" +
    "\000\012\011\060\012\053\016\047\022\124\001\001\000" +
    "\002\001\001\000\020\011\060\012\053\016\047\022\055" +
    "\023\126\024\062\025\057\001\001\000\004\017\067\001" +
    "\001\000\002\001\001\000\004\004\131\001\001\000\024" +
    "\002\052\011\060\012\053\015\045\016\047\022\055\023" +
    "\063\024\062\025\057\001\001\000\002\001\001\000\004" +
    "\004\134\001\001\000\024\002\052\011\060\012\053\015" +
    "\045\016\047\022\055\023\063\024\062\025\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\144\011\034\012\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   SELA alex = (SELA)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	return getScanner().next_token(); 

    }

 
public void syntax_error(Symbol unidadLexica){
				ErrorSintactico.errorSintactico(unidadLexica);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= BLOQUE ListaDec SEP ListaInstr FBLOQUE 
            {
              Block RESULT =null;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		List<Dec> ld = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location lixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location lixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Inst> li = (List<Inst>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(ld, li); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListaDec ::= Dec ListaDec 
            {
              List<Dec> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Dec> ld = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ld.add(0, d); RESULT = ld; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListaDec ::= CONS Dec ListaDec 
            {
              List<Dec> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Dec> ld = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.cons = true; ld.add(0, d); RESULT = ld; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListaDec ::= 
            {
              List<Dec> RESULT =null;
		 RESULT = new ArrayList<Dec>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListaInstr ::= ListaInstr Instr 
            {
              List<Inst> RESULT =null;
		Location lixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location lixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Inst> li = (List<Inst>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 li.add(i); RESULT = li; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListaInstr ::= 
            {
              List<Inst> RESULT =null;
		 RESULT = new ArrayList<Inst>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= Tipo IDV FININSTR 
            {
              Dec RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec(t, new Id(i), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= Tipo IDV ASIG Base FININSTR 
            {
              Dec RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec(t, new Id(i), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Dec ::= TipoC IDV FININSTR 
            {
              Dec RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		TipoC t = (TipoC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec(t, new Id(i), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Dec ::= TipoC IDV ASIG DecArray FININSTR 
            {
              Dec RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		TipoC t = (TipoC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location daxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location daxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		DArray da = (DArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec(t, new Id(i), da); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.ENT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= LOG 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.LOG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TipoC ::= TipoC DIM 
            {
              TipoC RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		TipoC t = (TipoC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location dimxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dimxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String dim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 t.d.add(Integer.parseInt(dim.substring(1, dim.length()-1))); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TipoC ::= Tipo DIM 
            {
              TipoC RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoC(t, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Base ::= BaseE 
            {
              Expr RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		NumConst b = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Base ::= BaseL 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		BoolConst l = (BoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Base ::= IDV 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BaseE ::= NUMENT 
            {
              NumConst RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BaseL ::= TRUE 
            {
              BoolConst RESULT =null;
		 RESULT = new BoolConst(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BaseL ::= FALSE 
            {
              BoolConst RESULT =null;
		 RESULT = new BoolConst(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecArray ::= APACCESO NumPYC CIACCESO 
            {
              DArray RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		DArray n = (DArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecArray",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NumPYC ::= NumPYC PYC Base 
            {
              DArray RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		DArray n = (DArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n.lexp.add((Base)b); RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumPYC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NumPYC ::= Base 
            {
              DArray RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DArray n = new DArray(); n.lexp.add((Base)b); RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumPYC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NumPYC ::= NumPYC PYC DecArray 
            {
              DArray RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		DArray n = (DArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location dcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		DArray dc = (DArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n.lexp.add((DArray)dc); RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumPYC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NumPYC ::= DecArray 
            {
              DArray RESULT =null;
		Location dcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		DArray dc = (DArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 DArray n = new DArray(); n.lexp.add((DArray)dc); RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumPYC",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instr ::= FININSTR 
            {
              Inst RESULT =null;
		 RESULT = new Vacia(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instr ::= Programa 
            {
              Inst RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Block p = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instr ::= Exp1 ASIG Exp1 FININSTR 
            {
              Inst RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Asig(s,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instr ::= IF APCON Exp1 CICON ENTONCES ListaInstr FSI 
            {
              Inst RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Inst> l = (List<Inst>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThen(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instr ::= IF APCON Exp1 CICON ENTONCES ListaInstr SINO ListaInstr FSI 
            {
              Inst RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		List<Inst> l = (List<Inst>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Inst> m = (List<Inst>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfThenElse(e, l, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instr ::= MIENTRAS APCON Exp1 CICON SBUCLE ListaInstr FMIENTRAS 
            {
              Inst RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Inst> l = (List<Inst>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Var ::= Var ACCESO 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Var ::= IDV 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= BaseE 
            {
              Expr RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		NumConst b = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= BaseL 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		BoolConst l = (BoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Var 
            {
              Expr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= PAP Exp1 PCI 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp1 ::= Exp2 OPC1 Exp2 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(o, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp1 ::= Exp2 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp1 ::= Exp1 OPC1 Exp2 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(o, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp2 ::= Exp3 OPC2 Exp3 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(o, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp2 ::= Exp3 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp2 ::= Exp2 OPC2 Exp3 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(o, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp3 ::= Exp OPC3 Exp 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(o, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp3 ::= Exp 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp3 ::= Exp3 OPC3 Exp 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(o, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp3 ::= NEG Exp 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(Operadores.NEG, null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPC1 ::= MAYOR 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.MAYOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPC1 ::= MENOR 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.MENOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPC1 ::= IGUAL 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC1",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPC2 ::= DIS 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.DIS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPC2 ::= MAS 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.MAS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPC2 ::= MENOS 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.MENOS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPC3 ::= CON 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.CON; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPC3 ::= POR 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.POR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPC3 ::= DIV 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

