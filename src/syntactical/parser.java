
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed May 17 03:13:10 CEST 2017
//----------------------------------------------------

package syntactical;

import lexical.SELA;
import lexical.SELAErr;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import ast.Dec.*;
import ast.Expr.*;
import ast.Inst.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed May 17 03:13:10 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\005\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\005\002\000" +
    "\002\006\005\000\002\006\007\000\002\006\005\000\002" +
    "\006\007\000\002\007\003\000\002\007\003\000\002\010" +
    "\004\000\002\010\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\005\000\002\015\005\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\006\000\002\016\010\000\002\016\012\000\002\016\010" +
    "\000\002\022\004\000\002\022\004\000\002\017\003\000" +
    "\002\017\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\005\005\001\002\000\004\002\131\001" +
    "\002\000\012\004\013\007\ufffd\027\007\030\010\001\002" +
    "\000\006\044\124\045\123\001\002\000\006\044\ufff3\045" +
    "\ufff3\001\002\000\006\044\ufff4\045\ufff4\001\002\000\004" +
    "\007\042\001\002\000\006\044\021\045\020\001\002\000" +
    "\006\027\007\030\010\001\002\000\012\004\013\007\ufffd" +
    "\027\007\030\010\001\002\000\004\007\uffff\001\002\000" +
    "\012\004\013\007\ufffd\027\007\030\010\001\002\000\004" +
    "\007\ufffe\001\002\000\006\044\ufff1\045\ufff1\001\002\000" +
    "\006\012\023\013\022\001\002\000\012\004\ufff6\007\ufff6" +
    "\027\ufff6\030\ufff6\001\002\000\004\024\025\001\002\000" +
    "\004\013\041\001\002\000\012\044\035\046\034\047\030" +
    "\050\032\001\002\000\010\013\uffef\025\uffef\026\uffef\001" +
    "\002\000\006\025\036\026\037\001\002\000\040\011\uffec" +
    "\012\uffec\013\uffec\016\uffec\025\uffec\026\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\001\002\000\006\025\uffe8\026\uffe8\001\002\000" +
    "\040\011\uffeb\012\uffeb\013\uffeb\016\uffeb\025\uffeb\026\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\001\002\000\010\013\ufff0\025\ufff0" +
    "\026\ufff0\001\002\000\040\011\uffed\012\uffed\013\uffed\016" +
    "\uffed\025\uffed\026\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\001\002\000" +
    "\010\013\uffee\025\uffee\026\uffee\001\002\000\004\013\uffea" +
    "\001\002\000\012\044\035\046\034\047\030\050\032\001" +
    "\002\000\006\025\uffe9\026\uffe9\001\002\000\012\004\ufff5" +
    "\007\ufff5\027\ufff5\030\ufff5\001\002\000\032\005\ufffb\006" +
    "\ufffb\010\ufffb\013\ufffb\014\ufffb\021\ufffb\042\ufffb\043\ufffb" +
    "\044\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002\000\032\005" +
    "\005\006\047\010\056\013\054\014\050\021\061\042\045" +
    "\043\051\044\060\046\034\047\030\050\032\001\002\000" +
    "\032\005\ufffc\006\ufffc\010\ufffc\013\ufffc\014\ufffc\021\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\046\ufffc\047\ufffc\050\ufffc\001" +
    "\002\000\020\010\056\042\045\043\051\044\060\046\034" +
    "\047\030\050\032\001\002\000\034\011\uffdb\012\uffdb\013" +
    "\uffdb\016\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002\000\040\002" +
    "\000\005\000\006\000\010\000\013\000\014\000\020\000" +
    "\021\000\023\000\042\000\043\000\044\000\046\000\047" +
    "\000\050\000\001\002\000\004\015\113\001\002\000\034" +
    "\011\uffde\012\uffde\013\uffde\016\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\001\002\000\036\005\uffe6\006\uffe6\010\uffe6\013\uffe6\014" +
    "\uffe6\020\uffe6\021\uffe6\023\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\001\002\000\034\011\uffdc\012" +
    "\uffdc\013\uffdc\016\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001\002\000" +
    "\036\005\uffe7\006\uffe7\010\uffe7\013\uffe7\014\uffe7\020\uffe7" +
    "\021\uffe7\023\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\001\002\000\026\012\110\031\070\032\064" +
    "\033\066\034\072\035\073\036\071\037\065\040\074\041" +
    "\075\001\002\000\020\010\056\042\045\043\051\044\060" +
    "\046\034\047\030\050\032\001\002\000\034\011\uffdd\012" +
    "\uffdd\013\uffdd\016\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001\002\000" +
    "\034\011\uffdf\012\uffdf\013\uffdf\016\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\001\002\000\004\015\062\001\002\000\020\010\056" +
    "\042\045\043\051\044\060\046\034\047\030\050\032\001" +
    "\002\000\026\016\076\031\070\032\064\033\066\034\072" +
    "\035\073\036\071\037\065\040\074\041\075\001\002\000" +
    "\020\010\uffd1\042\uffd1\043\uffd1\044\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\001\002\000\020\010\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\001\002\000\020\010\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\001" +
    "\002\000\020\010\056\042\045\043\051\044\060\046\034" +
    "\047\030\050\032\001\002\000\020\010\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\046\uffd2\047\uffd2\050\uffd2\001\002\000\020" +
    "\010\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\001\002\000\020\010\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\001\002\000\020\010\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\001\002" +
    "\000\020\010\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\001\002\000\020\010\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\046\uffd3\047\uffd3\050\uffd3\001\002\000\004\022" +
    "\077\001\002\000\036\005\ufff9\006\ufff9\010\ufff9\013\ufff9" +
    "\014\ufff9\020\ufff9\021\ufff9\023\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\001\002\000\036\005\uffe2" +
    "\006\uffe2\010\uffe2\013\uffe2\014\uffe2\020\uffe2\021\uffe2\023" +
    "\102\042\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\001\002\000\036\005\ufffa\006\ufffa\010\ufffa\013\ufffa\014" +
    "\ufffa\020\ufffa\021\ufffa\023\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\001\002\000\032\005\005\010" +
    "\056\013\054\014\050\021\061\023\102\042\045\043\051" +
    "\044\060\046\034\047\030\050\032\001\002\000\036\005" +
    "\uffe1\006\uffe1\010\uffe1\013\uffe1\014\uffe1\020\uffe1\021\uffe1" +
    "\023\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\001\002\000\036\005\uffe0\006\uffe0\010\uffe0\013\uffe0" +
    "\014\uffe0\020\uffe0\021\uffe0\023\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\001\002\000\034\011\uffd9" +
    "\012\uffd9\013\uffd9\016\uffd9\031\070\032\064\033\066\034" +
    "\072\035\073\036\071\037\065\040\074\041\075\001\002" +
    "\000\026\011\107\031\070\032\064\033\066\034\072\035" +
    "\073\036\071\037\065\040\074\041\075\001\002\000\034" +
    "\011\uffda\012\uffda\013\uffda\016\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\001\002\000\020\010\056\042\045\043\051\044\060\046" +
    "\034\047\030\050\032\001\002\000\026\013\112\031\070" +
    "\032\064\033\066\034\072\035\073\036\071\037\065\040" +
    "\074\041\075\001\002\000\036\005\uffe5\006\uffe5\010\uffe5" +
    "\013\uffe5\014\uffe5\020\uffe5\021\uffe5\023\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002\000\020" +
    "\010\056\042\045\043\051\044\060\046\034\047\030\050" +
    "\032\001\002\000\026\016\115\031\070\032\064\033\066" +
    "\034\072\035\073\036\071\037\065\040\074\041\075\001" +
    "\002\000\004\017\116\001\002\000\036\005\ufff9\006\ufff9" +
    "\010\ufff9\013\ufff9\014\ufff9\020\ufff9\021\ufff9\023\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9\050\ufff9\001\002" +
    "\000\036\005\uffe4\006\uffe4\010\uffe4\013\uffe4\014\uffe4\020" +
    "\120\021\uffe4\023\102\042\uffe4\043\uffe4\044\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\001\002\000\036\005\ufff9\006\ufff9\010" +
    "\ufff9\013\ufff9\014\ufff9\020\ufff9\021\ufff9\023\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\046\ufff9\047\ufff9\050\ufff9\001\002\000" +
    "\036\005\uffe3\006\uffe3\010\uffe3\013\uffe3\014\uffe3\020\uffe3" +
    "\021\uffe3\023\102\042\uffe3\043\uffe3\044\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\001\002\000\034\011\uffd8\012\uffd8\013\uffd8" +
    "\016\uffd8\031\070\032\064\033\066\034\072\035\073\036" +
    "\071\037\065\040\074\041\075\001\002\000\006\044\ufff2" +
    "\045\ufff2\001\002\000\006\012\126\013\125\001\002\000" +
    "\012\004\ufff8\007\ufff8\027\ufff8\030\ufff8\001\002\000\012" +
    "\044\035\046\034\047\030\050\032\001\002\000\004\013" +
    "\130\001\002\000\012\004\ufff7\007\ufff7\027\ufff7\030\ufff7" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\010\006\013\007\005\010\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\015\007\005\010\011" +
    "\001\001\000\012\003\014\006\013\007\005\010\011\001" +
    "\001\000\002\001\001\000\012\003\016\006\013\007\005" +
    "\010\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\023\001\001" +
    "\000\002\001\001\000\012\011\030\012\032\013\025\015" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\037\012\032\013\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\042\001\001\000\016" +
    "\002\051\012\056\013\052\016\043\017\045\021\054\001" +
    "\001\000\002\001\001\000\012\012\056\013\052\017\045" +
    "\021\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\066\001\001\000" +
    "\012\012\056\013\052\017\045\021\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\056\013\052\017\045\021\062\001\001\000\004\020\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\056\013\052\017\045\021\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\077\001\001\000\004\022\100\001" +
    "\001\000\002\001\001\000\020\002\051\012\056\013\052" +
    "\016\102\017\045\021\054\022\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\066\001\001\000\004" +
    "\020\066\001\001\000\002\001\001\000\012\012\056\013" +
    "\052\017\045\021\110\001\001\000\004\020\066\001\001" +
    "\000\002\001\001\000\012\012\056\013\052\017\045\021" +
    "\113\001\001\000\004\020\066\001\001\000\002\001\001" +
    "\000\004\005\116\001\001\000\004\022\100\001\001\000" +
    "\004\005\120\001\001\000\004\022\100\001\001\000\004" +
    "\020\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\126\012\032\013\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new SELAErr();
   SELA alex = (SELA)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	return getScanner().next_token(); 

    }

 
   private SELAErr errores;
   public void syntax_error(ComplexSymbol unidadLexica) {
     errores.errorSintactico(unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Block start_val = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= BLOQUE ListaDec SEP ListaInstr FBLOQUE 
            {
              Block RESULT =null;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		List<Dec> ld = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location lixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location lixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Inst> li = (List<Inst>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(ld, li); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListaDec ::= Dec ListaDec 
            {
              List<Dec> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Dec> ld = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ld.add(d); RESULT = ld; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListaDec ::= CONS Dec ListaDec 
            {
              List<Dec> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ldxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ldxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Dec> ld = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.cons = true; ld.add(d); RESULT = ld; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListaDec ::= 
            {
              List<Dec> RESULT =null;
		 RESULT = new ArrayList<Dec>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListaInstr ::= ListaInstr Instr 
            {
              List<Inst> RESULT =null;
		Location lixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location lixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Inst> li = (List<Inst>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 li.add(i); RESULT = li; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListaInstr ::= 
            {
              List<Inst> RESULT =null;
		 RESULT = new ArrayList<Inst>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListaInstrCond ::= ListaInstrCond InstrCond 
            {
              List<InstCond> RESULT =null;
		Location licxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location licxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<InstCond> lic = (List<InstCond>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location icxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location icxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		InstCond ic = (InstCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lic.add(ic); RESULT = lic; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstrCond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListaInstrCond ::= 
            {
              List<InstCond> RESULT =null;
		 RESULT = new ArrayList<InstCond>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaInstrCond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Dec ::= Tipo IDV FININSTR 
            {
              Dec RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec(t, new Id(i), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Dec ::= Tipo IDV ASIG Base FININSTR 
            {
              Dec RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec(t, new Id(i), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Dec ::= TipoC IDV FININSTR 
            {
              Dec RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		TipoC t = (TipoC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec(t, new Id(i), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Dec ::= TipoC IDV ASIG DecArray FININSTR 
            {
              Dec RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		TipoC t = (TipoC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location daxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location daxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Base> da = (List<Base>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Dec(t, new Id(i), da); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.ENT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= LOG 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.LOG; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TipoC ::= Tipo DIM 
            {
              TipoC RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoC(t, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TipoC ::= TipoC DIM 
            {
              TipoC RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		TipoC t = (TipoC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location dimxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location dimxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String dim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 t.d.add(Integer.parseInt(dim.substring(0, dim.length()-2))); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Base ::= BaseE 
            {
              Expr RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		NumConst b = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Base ::= BaseL 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		BoolConst l = (BoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Base ::= IDV 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Base",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BaseE ::= NUMENT 
            {
              NumConst RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseE",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BaseL ::= TRUE 
            {
              BoolConst RESULT =null;
		 RESULT = new BoolConst(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BaseL ::= FALSE 
            {
              BoolConst RESULT =null;
		 RESULT = new BoolConst(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BaseL",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecArray ::= APACCESO NumPYC CIACCESO 
            {
              List<Base> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Base> n = (List<Base>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecArray",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NumPYC ::= NumPYC PYC Base 
            {
              List<Base> RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		List<Base> n = (List<Base>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 n.add((Base)b); RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumPYC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NumPYC ::= Base 
            {
              List<Base> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 List<Base> np = new ArrayList<Base>(); np.add((Base)b); RESULT = np; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NumPYC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instr ::= FININSTR 
            {
              Inst RESULT =null;
		 RESULT = new Vacia(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instr ::= Programa 
            {
              Inst RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Block p = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instr ::= Exp ASIG Exp FININSTR 
            {
              Inst RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Asig(s,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instr ::= IF APCON Exp CICON ENTONCES ListaInstrCond 
            {
              Inst RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<InstCond> l = (List<InstCond>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ifthen(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Instr ::= IF APCON Exp CICON ENTONCES ListaInstrCond SINO ListaInstrCond 
            {
              Inst RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		List<InstCond> l = (List<InstCond>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<InstCond> m = (List<InstCond>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenElse(e, l, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Instr ::= MIENTRAS APCON Exp CICON SBUCLE ListaInstrCond 
            {
              Inst RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<InstCond> l = (List<InstCond>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InstrCond ::= GCONTROL Instr 
            {
              InstCond RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstCond(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstrCond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InstrCond ::= GCONTROL InstrCond 
            {
              InstCond RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		InstCond i = (InstCond)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.ng = i.ng+1; RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("InstrCond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Var ::= IDV 
            {
              Expr RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Var ::= ACCESO 
            {
              Expr RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= BaseE 
            {
              Expr RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		NumConst b = (NumConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= BaseL 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		BoolConst l = (BoolConst)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Var 
            {
              Expr RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= PAP Exp PCI 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= Exp OPC Exp 
            {
              Expr RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Operadores o = (Operadores)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(o, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= NEG Exp 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(Operadores.NEG, null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPC ::= MAYOR 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.MAYOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPC ::= MENOR 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.MENOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPC ::= IGUAL 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPC ::= CON 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.CON; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPC ::= DIS 
            {
              Operadores RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPC ::= MAS 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.MAS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPC ::= MENOS 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.MENOS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPC ::= POR 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.POR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPC ::= DIV 
            {
              Operadores RESULT =null;
		 RESULT = Operadores.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPC",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

